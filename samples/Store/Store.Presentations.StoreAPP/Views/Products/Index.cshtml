@model Store.Core.Application.Products.Queries.GetProductsByFilter.GetProductsByFilterQueryResponse
@using ModelWrapper.Extensions.Ordination;
@using ModelWrapper.Extensions.Pagination;
@using ModelWrapper.Extensions.Search;
@using ModelWrapper.Extensions.Filter;
@using ModelWrapper.Extensions.Select;
@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var ordination = Model.Ordination();
    var pagination = Model.Pagination();
    var search = Model.Search();
    var filterBy = "name_startswith";
    var name_startswith = Model.GetFilterProperty(filterBy).ToString();

    var hasAmount = Model.HasResponseProperty("Amount");
    var hasValue = Model.HasResponseProperty("Value");
}

<h1>Products - @ordination.Order - @ordination.OrderBy</h1>
@using (Html.BeginForm(FormMethod.Get))
{
    <div class="input-group mb-3">
        <input type="text" class="form-control" name="@(filterBy)" placeholder="Search..." aria-label="Search..." aria-describedby="button-addon2" value="@(name_startswith)" />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Find</button>
        </div>
    </div>
}

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>#</th>
            <th>Name</th>
            @if (hasAmount)
            {
                <th>Amount</th>
            }
            @if (hasValue)
            {
                <th>Value</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.GetModels())
        {
            <tr>
                <td>@item.ProductID</td>
                <td>@item.Name</td>
                @if (hasAmount)
                {
                    <td>@item.Amount</td>
                }
                @if (hasValue)
                {
                    <td>@item.Value</td>
                }
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="4">
                <div class="row">
                    <div class="col-6 text-left">@(Model.ResultCount) registers found | Showing @(pagination.Size) registers</div>
                    <div class="col-6 text-right">
                        @{
                            var allowPrevious = pagination.Number != 0;
                            var allowNext = pagination.Number != 0;
                        }
                        <nav aria-label="Page navigation example">
                            <ul class="pagination">
                                <li class="page-item">
                                    <a class="page-link" href="#" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                <li class="page-item active"><a class="page-link" href="#">@(pagination.Number)</a></li>
                                <li class="page-item">
                                    <a class="page-link" href="#" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </td>
        </tr>
    </tfoot>
</table>
